build: false

environment:

  matrix:

    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    #- PYTHON: "C:\\Python27"
    #- PYTHON: "C:\\Python33"
    #- PYTHON: "C:\\Python34"
    #- PYTHON: "C:\\Python35"
    #- PYTHON: "C:\\Python27-x64"
    #- PYTHON: "C:\\Python33-x64"
    #  DISTUTILS_USE_SDK: "1"
    #- PYTHON: "C:\\Python34-x64"
    #  DISTUTILS_USE_SDK: "1"
    #- PYTHON: "C:\\Python35-x64"

    - PYTHON_VERSION: 2.7
      MINICONDA: C:\Miniconda
      PYTHON_ARCH: "32"
    - PYTHON_VERSION: 2.7
      MINICONDA: C:\Miniconda-x64
      PYTHON_ARCH: "64"
    - PYTHON_VERSION: 3.4
      MINICONDA: C:\Miniconda3
      PYTHON_ARCH: "32"
    #- PYTHON_VERSION: 3.4
    #  MINICONDA: C:\Miniconda3-x64
    #  PYTHON_ARCH: "64"
    - PYTHON_VERSION: 3.5
      MINICONDA: C:\Miniconda35
      PYTHON_ARCH: "32"
    - PYTHON_VERSION: 3.5
      MINICONDA: C:\Miniconda35-x64
      PYTHON_ARCH: "64"

init:
  - "ECHO %PYTHON_VERSION% %MINICONDA%"

install:
  # We need wheel installed to build wheels
  #- "%PYTHON%\\python.exe -m pip install wheel"
  #- "%PYTHON%/Scripts/pip.exe install nose"
  - "set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%"
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a
  - "conda create -q -n test-environment python=%PYTHON_VERSION% pip nose numpy matplotlib pandas"
  - activate test-environment
  #- pip install coverage
  - pip install -r dev_requirements.txt                    # pre-install pinned dependencies
  - pip install .                                          # install source and build/install wheels
  #- pip install wheel
  - pip list

##build: off

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python evrsion you want to use on PATH.
  #- "build.cmd %PYTHON%\\python.exe setup.py test"
  #- "%PYTHON%/Scripts/nosetests"
  - nosetests

#after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  #- "build.cmd %PYTHON%\\python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

# Tweaks for gitflow; multiple configs to prevent breaking master
# configuration for "master" branch
# build in Release mode and deploy locally
#-
branches:
  only:
    #- master
    - develop

#  configuration: Release
#  deploy:
#    provider: Local
#    ...

# configuration for all branches starting from "/feature"
# build in Debug mode and deploy locally for testing
#-
#  branches:
#    only:
#      - /feature/*

#  configuration: Debug
#  deploy:
#    provider: Local
#    ...

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.

# References
# ----- ---------                           -------------
# (001) Appveyor with Miniconda             http://tjelvarolsson.com/blog/how-to-continuously-test-your-python-code-on-windows-using-appveyor/
# (002) Branches with gitflow               http://www.appveyor.com/docs/branches
